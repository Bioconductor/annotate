%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
% \VignetteIndexEntry{HOWTO Get HTML Output}
% \VignetteDepends{annotate, hgu95av2}
% \VignetteKeywords{Expression Analysis, Annotation}
% \VignettePackage{annotate}
\documentclass[11pt]{article}


\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}

\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

\usepackage[authoryear,round]{natbib}


\bibliographystyle{plainnat}

\usepackage{hyperref}

\begin{document}
\title{HowTo: get pretty HTML output for my gene list}
\author{James W. MacDonald}
\maketitle{}

\section{Overview}
The intent of this vignette is to show how to make reasonably nice looking HTML tables for presenting
the results of a microarray analysis. These tables are a very nice format because you can insert 
clickable links to various public annotation databases, which facilitates the downstream analysis. 
In addition, the format is quite compact, can be posted on the web, and can be viewed using any number 
of free web browsers. One caveat; an HTML table is probably not the best format for presenting the 
results for \emph{all} of the genes on a chip. For even a small (5000 gene) chip, the file could be 10 Mb 
or more, which would take an inordinate amount of time to open and view. Also note that the Bioconductor 
project supplies annotation packages for many of the more popular Affymetrix chips, as well as for many 
commercial spotted cDNA chips. For chips that have annotation packages, the \Rpackage{annaffy} package 
is the preferred method for making HTML tables. 

To make an annotated HTML table, the only requirement is that we have some sort of annotation data for the 
microarray that we are using. Most manufacturers supply data in various formats that can be read into 
\Rpackage{R}. For instance, Affymetrix supplies CSV files that can be read into \Rpackage{R} using the 
\Rmethod{read.csv()} function \url{http://www.affymetrix.com/support/technical/byproduct.affx?cat=arrays}.

\section{Data Analysis}
I will assume that the reader is familiar with the analysis of microarray data, and has a set of genes that
she would like to use. In addition, I will assume that the reader is familiar enough with \Rpackage{R} that
she can subset the data based on a list of genes, and reorder based on a particular statistic. For any questions 
about subsetting or ordering data, please see ``An Introduction to R''. For questions regarding microarray analysis, 
please consult the vignettes for, say \Rpackage{limma}, \Rpackage{multtest}, or \Rpackage{marray}.

\section{Getting Started}
We first load the \Rpackage{annotate} package, as well as some data. These data will be from the Affymetrix
HG-U95av2 chip (for which we would normally use \Rpackage{annaffy}). To keep the HTML table small, we will take a 
subset of fifteen genes as an example.

<<echo=FALSE, eval=TRUE>>=
options(width=70)
@ 

<<>>=
library("annotate")
data(eset)
igenes <- geneNames(eset)[246:260]
@

\section{Generate Annotation Data}
This next section is simply here to generate simulated annotation data. Normally, the annotation data
would have been loaded into \Rpackage{R} and subsetted using the set of differentially expressed genes.

<<fakeData>>=
ug <- paste(rep("Hs.", 15), sample(1000:10000, 15), sep="")
ll <- sample(10000:100000, 15)
ll[c(3,8)] <- "---" # This is done to show what to do with missing data later
gb <- paste(rep("NM_", 15), sample(1000:100000, 15), sep="")
sp <- paste(sample(LETTERS, 45, replace=T), sample(10000:999999, 45), sep="")
sp <- paste(sample(sp, 15), sample(sp, 15), sample(sp, 15), sep=" /// ")
sp[c(4,7,12)] <- "---" # Again, some missing data
@

The fake annotation IDs for UniGene, LocusLink, and GenBank are all just character vectors, which is generally
what we should expect. Usually there is only one identifier per gene from these sources. Note that I have also
simulated missing annotation identifiers with ``---''. This is consistent with Affymetrix annotation files. 
For some of the annotation data (e.g., UniGene, OMIM,  and LocusLink data), the format of the IDs is consistent enough 
that the missing data can be automatically converted to an HTML empty cell identifier ("\&nbsp;"). However,
this is not true of Affymetrix, SwissProt or GenBank identifiers. These must be converted by hand or there will
be a (busted) link built for the missing data identifier (I show how to do this for the SwissProt data below).

<<>>=
ug
ll
gb
@ 

The 'sp' data simulate what can be expected for SwissProt annotation data where there are multiple
identifiers for each gene. This output is consistent with the Affymetrix CSV files.

<<>>=
sp
@ 

If we were to simply use these annotation identifiers as is, the hyperlink would not be built correctly. For
any gene with multiple identifiers, we must first convert the character vector into a list of character
vectors for each gene. In addition, we have to remove the delimiter that separates the identifiers.

<<listConv>>=
sp <- strsplit(sub("---","&nbsp;",as.character(sp)), "///")
sp
@ 

We have converted the data to a list of character vectors, and also converted the ``---'' missing data identifier
to the HTML character for an empty cell.

\section{Build the Table}

Usually we would like to include the expression values for our genes along with some statistics, say a $t$-statistic,
fold change, and $p$-value. As an example, we will make a comparison using the first ten samples.

<<expDat>>=
dat <- exprs(eset)[igenes,1:10]
FC <- rowMeans(dat[igenes,1:5]) - rowMeans(dat[igenes,6:10])
pval <- esApply(eset[igenes,1:10], 1, function(x) t.test(x[1:5], x[6:10])$p.value)
tstat <- esApply(eset[igenes,1:10], 1, function(x) t.test(x[1:5], x[6:10])$statistic)
@ 

It is also usually a good idea to include gene names in the table. Normally the names would be subsetted from
the annotation data, but here we have to supply them.

<<echo=False>>=
options(width=40)
@ 
<<>>=
name <- c("hypothetical protein LOC221823",
          "meningioma (disrupted in balanced translocation) 1",
          "fasciculation and elongation protein zeta 2 (zygin II)",
          "Phosphoglycerate kinase {alternatively spliced}",
          "---","sodium channel, voltage-gated, type V, alpha polypeptide",
          "caspase 8, apoptosis-related cysteine protease","muscle specific gene","---","---","chemokine (C motif) ligand 1",
          "---","G antigen 1","G antigen 6","Fc fragment of IgG, low affinity IIIb, receptor for (CD16)")
name <- gsub("---", "&nbsp;", name)

@ 
<<echo=FALSE>>=
options(width=70)
@ 

We can now build our HTML table. To make the process more transparent, this will be done in steps. In practice
however, this can be done in one line. Note here that the genelist consists of annotation data that will be 
hyperlinked to online databases, whereas othernames consists of other data that will not be hyperlinked.

<<buildTable>>=
genelist <- list(igenes, ug, ll, gb, sp)
filename <- "Interesting_genes.html"
title <- "An Artificial Set of Interesting Genes"
othernames <- list(name, round(tstat, 2), round(pval, 3), round(FC, 1), round(dat, 2))
head <- c("Probe ID", "UniGene", "LocusLink", "GenBank", "SwissProt", "Gene Name", "t-statistic", "p-value",
          "Fold Change", "Sample 1", "Sample 2", "Sample 3", "Sample 4", "Sample 5", "Sample 6",
          "Sample 7", "Sample 8", "Sample 9", "Sample 10")
repository <- list("affy", "ug", "ll", "gb", "sp")
htmlpage(genelist, filename, title, othernames, head, repository = repository)
@ 

\end{document}
